<?xml version="1.0" ?>
<launch>
  <arg name="robot_ip" default="172.16.0.2"/>
  <arg name="load_gripper" default="false" />
  <arg name="no_static_map" default="true" />

    <group ns="panda_leader">
        
        <param name="robot_description" command="$(find xacro)/xacro --inorder $(find franka_description)/robots/panda_arm.urdf.xacro hand:=$(arg load_gripper)" />

        <include file="$(find franka_gripper)/launch/franka_gripper.launch" if="$(arg load_gripper)">
            <arg name="robot_ip" value="$(arg robot_ip)" />
        </include>

        <node name="franka_control" pkg="franka_control" type="franka_control_node" output="screen" required="true">
            <rosparam command="load" file="$(find franka_control)/config/franka_control_node.yaml" />
            <param name="robot_ip" value="$(arg robot_ip)" />
        </node>

        <!-- Moveit launch files-->
        <include file="$(find panda_moveit_config)/launch/move_group.launch">
            <arg name="fake_execution" value="false"/>
            <arg name="load_gripper" default="true" />
        </include>

        <!-- <include file="$(find panda_moveit_config)/launch/moveit_rviz.launch">
        </include> -->

        <!-- Real time lidar launch files-->
        <!-- <include file="$(find ydlidar_ros_driver)/launch/X4.launch" /> -->

        <rosparam command="load" file="$(find franka_control)/config/default_controllers.yaml" />
        <node name="state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" args="franka_state_controller"/>
        <node name="position_state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" args="position_joint_trajectory_controller"/>

        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen"/>
   
        <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
            <rosparam if="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states, franka_gripper/joint_states] </rosparam>
            <rosparam unless="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states] </rosparam>
            <param name="rate" value="30"/>
        </node>
    
        <node name="joint_state_desired_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
            <rosparam if="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states_desired, franka_gripper/joint_states] </rosparam>
            <rosparam unless="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states_desired] </rosparam>
            <param name="rate" value="30"/>
            <remap from="/joint_states" to="/joint_states_desired" />
        </node>

        <rosparam command="load" file="$(find franka_hunter_controllers)/config/leader_cartesian_impendance_controller.yaml" />
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="--stopped panda_leader_cartesian_impedance_controller"/>
        <node name="rqt_reconfigure" pkg="rqt_reconfigure" type="rqt_reconfigure" required="false" />
        <!-- <node name="rqt_controller_node" pkg="rqt_joint_trajectory_controller" type="rqt_joint_trajectory_controller" required="false" /> -->

        <node name="tf_between_leader_follower" pkg="tf" type="static_transform_publisher" args="1.5 0 1.5 0 0 0 /base_link /panda_link0 100" />

<!--         <node name="rviz_moveit" pkg="rviz" type="rviz" output="screen" args="-d $(find thorvald_panda_)/config/thorvald_visualization.rviz"/>
 -->
    </group>

        <!-- Run the map server -->
    <group unless="$(arg no_static_map)">
      <arg name="map_file" default="$(find franka_hunter_navigation)/maps/outdoor_small.yaml"/>
      <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />
    </group>

</launch>
